{"version":3,"sources":["../../src/validators.tsx","../../src/templator.tsx","../../src/index.tsx","App.tsx","index.tsx"],"names":["validators","required","input","label","minLength","maxLength","number","isNaN","Templator","memo","schema","onSubmit","dynamicProps","formElement","useState","values","setValues","errors","setErrors","context","inputs","item","createRef","setValue","elementErrors","Object","element","console","customError","error","refocus","name","undefined","getInputs","validateInput","errorFields","children","elements","layoutElements","renderLayout","props","tabIndex","index","ref","validate","submit","onChange","value","React","registerElement","type","render","Form","e","event","currentTarget","onBlur","isLoading","registerLayoutElement","style","flex","backgroundColor","justifyContent","content","validator","App","setIsLoading","data","log","setTimeout","lastname","shit","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.120dc48d.chunk.js","sourcesContent":["export const validators = {\n  required: (label: string, input: any, _: any) =>\n    !input && `${label} must have a value`,\n  minLength: (label: string, input: any, length: any) =>\n    input &&\n    input.length < length &&\n    `${label} must be at least ${length} characters`,\n  maxLength: (label: string, input: any, length: any) =>\n    input &&\n    input.length > length &&\n    `${label} must not be more than ${length} characters`,\n  number: (label: string, input: any, _: any) =>\n    isNaN(input) && `${label} must be a number`\n};\n","import React, {\n  createRef,\n  Fragment,\n  memo,\n  ReactElement,\n  ReactNode,\n  RefObject,\n  useState\n} from 'react';\n\nimport { validators } from './validators';\n\nexport interface IForm {\n  schema: IFormSchema;\n  dynamicProps?: Record<string, any>;\n  onSubmit: (\n    values: Record<string, string>,\n    setErrors: (errors: Record<string, string | undefined>) => void\n  ) => void;\n  [props: string]: any;\n}\n\ninterface ITemplator extends IForm {\n  formElement: (submit: () => void) => ReactElement;\n}\n\ninterface IFormContext {\n  values: Record<string, any>;\n  errors: Record<string, string | undefined>;\n  setValue: (name: string, value: any) => void;\n  inputs: Record<string, RefObject<HTMLFormElement>>;\n}\n\nexport const Templator = memo(\n  ({ schema, onSubmit, dynamicProps = {}, formElement }: ITemplator) => {\n    const [values, setValues] = useState<Record<string, any>>({});\n    const [errors, setErrors] = useState<Record<string, string | undefined>>(\n      {}\n    );\n\n    const context: IFormContext = {\n      values,\n      errors,\n      inputs: schema.reduce(\n        (obj, item) => ({\n          ...obj,\n          [item.name]: createRef()\n        }),\n        {}\n      ),\n      setValue: (name: string, value: any) => {\n        setValues({ ...values, [name]: value });\n      }\n    };\n\n    function validateInput(\n      element: IElementSchema,\n      setError?: boolean,\n      refocus?: boolean\n    ) {\n      const elementErrors = Object.keys(validators)\n        .map(\n          (validator) =>\n            element[validator] &&\n            validators[validator](\n              element.label,\n              values[element.name],\n              element[validator]\n            )\n        )\n        .filter((error) => error);\n\n      console.log(elementErrors);\n\n      if (element.validator) {\n        const customError = element.validator(\n          element.label ? element.label : element.name,\n          values[element.name]\n        );\n        if (customError) elementErrors.push(customError);\n      }\n\n      const error =\n        elementErrors && elementErrors.length > 0 && elementErrors[0];\n\n      if (setError) {\n        if (refocus && error && context.inputs[element.name].current)\n          context.inputs[element.name].current!.focus();\n\n        setErrors({\n          ...errors,\n          [element.name]: error ? `${error}` : undefined\n        });\n      }\n\n      return {\n        name: element.name,\n        error:\n          elementErrors && elementErrors.length > 0\n            ? elementErrors[0]\n            : undefined\n      };\n    }\n\n    function getInputs(schema: IFormSchema | ILayoutSchema): IElementSchema[] {\n      const inputs: IElementSchema[] = [];\n      schema.forEach((element: IElementSchema | ILayoutSchema) => {\n        if ((element as IElementSchema).name)\n          inputs.push(element as IElementSchema);\n        if ((element as ILayoutSchema).content)\n          inputs.push(...getInputs(element.content as ILayoutSchema));\n      });\n\n      return inputs;\n    }\n\n    function onFormSubmit() {\n      const errors = getInputs(schema)\n        .map((element) => validateInput(element))\n        .filter((element) => element.error)\n        .reduce(\n          (obj, item) => ({\n            ...obj,\n            [item.name]: item.error\n          }),\n          {}\n        );\n\n      setErrors(errors);\n      const errorFields = Object.keys(errors);\n      if (errorFields.length > 0) {\n        context.inputs[errorFields[0]].current!.focus();\n        return;\n      }\n\n      onSubmit(values, setErrors);\n    }\n\n    function renderLayout(schema: IFormSchema) {\n      return (\n        <Fragment>\n          {schema &&\n            schema.map(\n              (element: ILayoutSchema | IElementSchema, index: number) => {\n                if (!elements[element.type] && !layoutElements[element.type])\n                  return console.error(\n                    `react-form-templator: Element ${element.type} has not been registered`\n                  );\n\n                if (element.content) {\n                  return React.cloneElement(\n                    layoutElements[element.type]({\n                      ...element.content,\n                      children: renderLayout(element.content)\n                    })\n                  );\n                }\n\n                const formElement = element as IElementSchema;\n\n                const props = {\n                  tabIndex: index + 1,\n                  error: errors[formElement.name],\n                  ref: context.inputs[formElement.name],\n                  ...(dynamicProps[formElement.name]\n                    ? dynamicProps[formElement.name]\n                    : {}),\n\n                  validate: (refocus: boolean) =>\n                    validateInput(formElement, true, refocus),\n                  submit: onFormSubmit,\n                  onChange: (value: any) => {\n                    setErrors({ ...errors, [formElement.name]: undefined });\n                    context.setValue(formElement.name, value);\n                  },\n                  value: values[formElement.name]\n                };\n\n                return React.cloneElement(\n                  elements[formElement.type]({ ...formElement, ...props })\n                );\n              }\n            )}\n        </Fragment>\n      );\n    }\n\n    return React.cloneElement(formElement(onFormSubmit), {\n      children: renderLayout(schema)\n    });\n  }\n);\n\nexport interface IElementSchema {\n  type: string;\n  name: string;\n  label?: string;\n  validator?: (label: string, input: string) => {};\n  [data: string]: any;\n}\n\nexport interface ILayoutSchema {\n  type: string;\n  content: IFormSchema;\n  [data: string]: any;\n}\n\nexport interface IFormSchema extends Array<IElementSchema | ILayoutSchema> {}\n\nconst elements: Record<string, (props: IElementProps) => ReactElement> = {};\nconst layoutElements: Record<\n  string,\n  (props: ILayoutProps) => ReactElement\n> = {};\n\nexport function registerElement(\n  type: string,\n  render: (props: IElementProps) => ReactElement\n): void {\n  if (layoutElements[type] || elements[type])\n    return console.error(`Element type '${type}' is already registered`);\n  elements[type] = render;\n}\n\ninterface ILayoutProps {\n  children: ReactNode;\n  [data: string]: any;\n}\nexport function registerLayoutElement(\n  type: string,\n  render: (props: ILayoutProps) => ReactElement\n): void {\n  if (layoutElements[type] || elements[type])\n    return console.error(\n      `react-templator: Element type '${type}' is already registered`\n    );\n  layoutElements[type] = render;\n}\n\ninterface IElementProps {\n  [data: string]: any;\n}\n","import React from 'react';\nimport {\n  Templator,\n  IForm,\n  IElementSchema,\n  ILayoutSchema,\n  IFormSchema,\n  registerElement,\n  registerLayoutElement\n} from './templator';\n\nexport function Form({ schema, onSubmit, dynamicProps }: IForm) {\n  return (\n    <Templator\n      onSubmit={onSubmit}\n      dynamicProps={dynamicProps}\n      schema={schema}\n      formElement={(submit: () => void) => (\n        <form\n          onSubmit={(e) => {\n            e.preventDefault();\n            submit();\n          }}\n        />\n      )}\n    />\n  );\n}\n\nexport type { IElementSchema, ILayoutSchema, IFormSchema };\nexport { registerElement, registerLayoutElement };\n","import React, { FormEvent, useState } from 'react';\n\nimport {\n  IFormSchema,\n  Form,\n  registerLayoutElement,\n  registerElement\n} from './modules/react-form-templator';\n\nregisterElement('text-input', (props) => {\n  return (\n    <div>\n      {props.label}\n      <input\n        type='text'\n        name={props.name}\n        tabIndex={props.tabIndex}\n        ref={props.ref}\n        onChange={(event: FormEvent<HTMLInputElement>) =>\n          props.onChange(event.currentTarget.value)\n        }\n        onBlur={() => props.validate(false)}\n        // onBlur={() => props.validate(true)}\n      />\n      {props.error}\n    </div>\n  );\n});\n\nregisterElement('submit', (props) => {\n  return (\n    <input type='submit' value={props.isLoading ? 'loading' : props.name} />\n  );\n});\n\nregisterLayoutElement('inline', ({ children }) => {\n  return (\n    <div\n      style={{\n        flex: 1,\n        backgroundColor: 'blue',\n        justifyContent: 'space-between'\n      }}\n    >\n      {children}\n    </div>\n  );\n});\n\nconst schema: IFormSchema = [\n  {\n    label: 'hello',\n    type: 'text-input',\n    name: 'firstname',\n    required: true,\n    minLength: 5\n  },\n  {\n    type: 'inline',\n    content: [\n      {\n        label: 'another',\n        type: 'text-input',\n        name: 'lastname',\n        required: true\n      },\n      {\n        label: 'anotherxx',\n        type: 'text-input',\n        name: 'lastnamxxxe',\n        required: true\n      }\n    ]\n  },\n\n  {\n    label: 'fuck',\n    type: 'text-input',\n    name: 'fuck',\n    number: true,\n    required: true\n  },\n  {\n    label: 'custom validator',\n    type: 'text-input',\n    required: true,\n    name: 'cusddtom',\n    validator: (label: string, input: string) =>\n      input !== 'vrondakis' && `${label} must be vrondakis`\n  },\n  {\n    type: 'submit',\n    name: 'shit'\n  }\n];\n\nconst App = () => {\n  const [isLoading, setIsLoading] = useState<boolean>(false);\n  return (\n    <>\n      <Form\n        schema={schema}\n        onSubmit={(\n          data: Record<string, any>,\n          setErrors: (errors: Record<string, string>) => void\n        ) => {\n          console.log('on submit', data);\n          setIsLoading(true);\n          setTimeout(() => {\n            // Simulate the server returning an error\n            setErrors({ lastname: 'CUNT' });\n            setIsLoading(false);\n          }, 2000);\n        }}\n        dynamicProps={{\n          shit: { isLoading }\n        }}\n      />\n    </>\n  );\n};\n\nexport default App;\n","import './index.css'\n\nimport React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\n\nReactDOM.render(<App />, document.getElementById('root'))\n"],"sourceRoot":""}