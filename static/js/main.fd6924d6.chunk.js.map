{"version":3,"sources":["constants/form.tsx","constants/form-inputs.tsx","components/TextInput.tsx","components/SelectInput.tsx","components/SubmitInput.tsx","constants/layout-elements.tsx","components/Section.tsx","App.tsx","index.tsx"],"names":["FORM_SCHEMA","type","label","children","name","required","minLength","maxLength","ELEMENTS","ref","error","value","validate","tabIndex","onChange","className","event","currentTarget","onBlur","select","colors","disabled","selected","map","color","key","submit","isLoading","LAYOUT_ELEMENTS","section","style","marginBottom","App","useState","setIsLoading","elements","layoutElements","marginTop","schema","dynamicProps","fave_color","onSubmit","data","setErrors","setTimeout","last_name","alert","JSON","stringify","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.fd6924d6.chunk.js","sourcesContent":["import { IFormSchema } from 'react-templator';\n\nexport const FORM_SCHEMA: IFormSchema = [\n  {\n    type: 'section',\n    label: 'Your details',\n    children: [\n      {\n        type: 'text-input',\n        name: 'first_name',\n        label: 'First name',\n\n        required: true,\n        minLength: 2,\n        maxLength: 50\n      },\n      {\n        type: 'text-input',\n        name: 'last_name',\n        label: 'Last name',\n        required: true\n      },\n      {\n        type: 'select',\n        name: 'fave_color',\n        label: 'Color',\n\n        required: true\n      }\n    ]\n  },\n\n  {\n    type: 'section',\n    label: 'Your dog',\n    children: [\n      {\n        type: 'text-input',\n        name: 'dog-name',\n        label: 'Dog Name',\n        required: true\n      },\n\n      {\n        type: 'text-input',\n        name: 'breed',\n        label: 'Breed',\n        required: true\n      }\n    ]\n  },\n\n  {\n    type: 'submit',\n    name: 'submit',\n    label: 'Submit'\n  }\n];\n","import { ReactElement } from 'react';\nimport { selectInput } from '../components/SelectInput';\nimport { submitInput } from '../components/SubmitInput';\nimport { textInput } from '../components/TextInput';\nimport { IElementProps } from 'react-templator';\n\nexport const ELEMENTS: Record<\n  string,\n  (props: IElementProps) => ReactElement\n> = {\n  'text-input': textInput,\n  select: selectInput,\n  submit: submitInput\n};\n","import React, { ReactElement } from 'react';\nimport { IElementProps } from 'react-templator';\n\nexport const textInput = ({\n  ref,\n  name,\n  label,\n  error,\n  value,\n  validate,\n  tabIndex,\n  onChange\n}: IElementProps): ReactElement => (\n  <div className='input-container'>\n    <div className='field is-horizontal'>\n      <div className='field-label is-normal'>\n        <label className='label'>{label}</label>\n      </div>\n      <div className='field-body'>\n        <div className='field'>\n          <p className='control'>\n            <input\n              ref={ref}\n              type='text'\n              className={`input ${error ? 'is-danger' : ''}`}\n              name={name}\n              value={value}\n              tabIndex={tabIndex}\n              onChange={(event) => {\n                onChange(event.currentTarget.value);\n              }}\n              onBlur={() => validate(false)}\n            />\n            {error && <span className='error'>{error}</span>}\n          </p>\n        </div>\n      </div>\n    </div>\n  </div>\n);\n","import React, { ReactElement } from 'react';\nimport { IElementProps } from 'react-templator';\n\nexport const selectInput = ({\n  name,\n  label,\n  tabIndex,\n  error,\n  validate,\n  ref,\n  value,\n  onChange,\n  colors = []\n}: IElementProps): ReactElement => (\n  <div>\n    <div className='input-container'>\n      <div className='field is-horizontal'>\n        <div className='field-label is-normal'>\n          <label className='label'>{label}</label>\n        </div>\n        <div className='field-body'>\n          <div className='field'>\n            <p className='control'>\n              <div className={`select ${error ? 'is-danger' : ''}`}>\n                <select\n                  ref={ref}\n                  name={name}\n                  value={value}\n                  tabIndex={tabIndex}\n                  onBlur={() => validate(false)}\n                  onChange={(event) => {\n                    onChange(event.currentTarget.value);\n                  }}\n                >\n                  <option disabled selected></option>\n                  {colors.map((color: Record<string, string>) => (\n                    <option key={color.value} value={color.value}>\n                      {color.label}\n                    </option>\n                  ))}\n                </select>\n                <div className='error'>{error}</div>\n              </div>\n            </p>\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>\n);\n","import React from 'react';\nimport { ReactElement } from 'react';\nimport { IElementProps } from 'react-templator';\n\nexport const submitInput = ({\n  label,\n  tabIndex,\n  isLoading\n}: IElementProps): ReactElement => (\n  <div className='has-text-right'>\n    <button\n      type='submit'\n      tabIndex={tabIndex}\n      className={`button is-success ${isLoading ? 'is-loading' : ''}`}\n    >\n      {label}\n    </button>\n  </div>\n);\n","import { ReactElement } from 'react';\nimport { Section } from '../components/Section';\nimport { ILayoutProps } from 'react-templator';\n\nexport const LAYOUT_ELEMENTS: Record<\n  string,\n  (props: ILayoutProps) => ReactElement\n> = {\n  section: Section\n};\n","import React, { ReactElement } from 'react';\nimport { ILayoutProps } from 'react-templator';\n\nexport const Section = ({ label, children }: ILayoutProps): ReactElement => (\n  <div\n    style={{\n      marginBottom: 30\n    }}\n  >\n    <h1 className='subtitle has-text-centered'>{label}</h1>\n    <div>{children}</div>\n  </div>\n);\n","import React, { useState } from 'react';\nimport { FORM_SCHEMA } from './constants/form';\nimport { ELEMENTS } from './constants/form-inputs';\nimport { LAYOUT_ELEMENTS } from './constants/layout-elements';\n\nimport 'bulma/css/bulma.css';\nimport { Form, FormProvider } from 'react-templator';\n\nconst App = () => {\n  const [isLoading, setIsLoading] = useState<boolean>(false);\n  const colors = [\n    { value: 'red', label: 'Red' },\n    { value: 'green', label: 'Green' },\n    { value: 'blue', label: 'Blue' }\n  ];\n\n  return (\n    <>\n      <FormProvider elements={ELEMENTS} layoutElements={LAYOUT_ELEMENTS}>\n        <div className='container'>\n          <div className='columns is-centered'>\n            <div className='column is-6'>\n              <div className='card' style={{ marginTop: 100 }}>\n                <header className='card-header'>\n                  <p className='card-header-title'>React Templator Example</p>\n                </header>\n                <div className='card-content'>\n                  <Form\n                    schema={FORM_SCHEMA}\n                    dynamicProps={{\n                      fave_color: { colors },\n                      submit: {\n                        isLoading\n                      }\n                    }}\n                    onSubmit={(\n                      data: Record<string, any>,\n                      setErrors: (errors: Record<string, string>) => void\n                    ) => {\n                      setIsLoading(true);\n\n                      setTimeout(() => {\n                        setIsLoading(false);\n\n                        if (data.last_name !== 'vrondakis') {\n                          return setErrors({\n                            last_name: \"Last name must be 'vrondakis'\"\n                          });\n                        }\n\n                        alert(`Form submitted! Data: ${JSON.stringify(data)}`);\n                      }, 2000);\n                    }}\n                  />\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </FormProvider>\n    </>\n  );\n};\n\nexport default App;\n","import './index.css'\n\nimport React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\n\nReactDOM.render(<App />, document.getElementById('root'))\n"],"sourceRoot":""}